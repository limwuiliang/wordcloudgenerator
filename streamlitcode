import streamlit as st
import pandas as pd
import spacy
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Load the English tokenizer, tagger, parser, NER, and word vectors
nlp = spacy.load("en_core_web_sm")

def generate_word_cloud(data, column_name):
    # Concatenate all descriptions into one text
    text = ' '.join(data[column_name].dropna())
    
    # Process the text
    doc = nlp(text)
    
    # Words to ignore
    ignore_words = {'vector', 'illustration', 'background', 'line', 'icon', 'template', 'abstract', 
                    'mockup', '3D', 'photo', 'image', 'banner', 'presentation', 'picture', 
                    'concept', 'print', 'label', 'tile', 'graphic'}
    
    # Filter words
    words = [token.text.lower() for token in doc if (token.pos_ in ['NOUN', 'ADJ'] or 
             (token.dep_ == 'amod' and token.pos_ == 'ADJ')) and token.text.lower() not in ignore_words]
    
    # Generate a word cloud
    wordcloud = WordCloud(width = 800, height = 400, background_color ='white').generate(' '.join(set(words)))
    
    # Display the word cloud using matplotlib
    plt.figure(figsize = (10, 5), facecolor = None)
    plt.imshow(wordcloud)
    plt.axis("off")
    plt.tight_layout(pad = 0)
    
    # Save plot to a temporary buffer
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    plt.close()
    buf.seek(0)
    return buf

# Streamlit application layout
st.title('Word Cloud Generator')

# File uploader allows user to add their own CSV
uploaded_file = st.file_uploader("Choose a CSV file", type="csv")
if uploaded_file is not None:
    data = pd.read_csv(uploaded_file)
    if st.button('Generate Word Cloud'):
        # Assuming the column with text is named 'Description'
        buffer = generate_word_cloud(data, 'Description')
        st.image(buffer, use_column_width=True)
